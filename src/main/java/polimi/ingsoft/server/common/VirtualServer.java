package polimi.ingsoft.server.common;

import polimi.ingsoft.server.common.command.ServerCommand;
import polimi.ingsoft.client.common.VirtualView;

import java.io.IOException;
import java.io.Serializable;
import java.rmi.Remote;

/**
 * This interface represents a server instance, either a real server or its proxy
 * <p>
 * Be aware that all the match methods are handled at the match server level, so they are not
 * defined here but in VirtualMatchServer
 */
public interface VirtualServer extends Remote, Serializable {

    /**
     * Send a generic server command to be executed
     *
     * @param command a server command object to be sent to the server
     * @throws IOException if the communication is interrupted
     */
    void sendMessage(ServerCommand command) throws IOException;

    /**
     * Server expects this method to be run to establish a new connection
     * with a client
     *
     * @param client view to be added as a connected client
     * @throws IOException if the communication is interrupted
     */
    void connect(VirtualView client) throws IOException;

    /**
     * Override request for the autogenerated nickname (stub) with the user defined one
     *
     * @param nickname user defined nickname
     * @param stub autogenerated nickname
     * @throws IOException if the communication is interrupted
     */
    void setNickname(String nickname, String stub) throws IOException;

    /**
     * Request for the list of currently active matches
     *
     * @param nickname client sending the request
     * @throws IOException if the communication is interrupted
     */
    void getMatches(String nickname) throws IOException;

    /**
     * Request for match to be created
     *
     * @param playerNickname client sending the request
     * @param requiredNumPlayers number of player of the new match
     * @throws IOException if the communication is interrupted
     */
    void createMatch(String playerNickname, Integer requiredNumPlayers) throws IOException;

    /**
     * Request to join a match
     *
     * @param playerNickname  client sending the request
     * @param matchId id of the match to join
     * @throws IOException if the communication is interrupted
     */
    void joinMatch(String playerNickname, Integer matchId) throws IOException;

    /**
     * Ping request / Response to a pong from a client
     *
     * @param nickname client sending the request
     * @throws IOException if the communication is interrupted
     */
    void ping(String nickname) throws IOException;
}
