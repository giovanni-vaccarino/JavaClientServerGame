Index: src/main/java/polimi/ingsoft/Face.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package polimi.ingsoft;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class Face {\r\n    public List<Space> getSpaces(){\r\n        return null;\r\n    }\r\n\r\n    public List<CornerSpace> getAvailableCorners(){\r\n        return null;\r\n    }\r\n\r\n    public Map<Item,Integer> getNumberItems(boolean isBack){\r\n        return null;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/polimi/ingsoft/Face.java b/src/main/java/polimi/ingsoft/Face.java
--- a/src/main/java/polimi/ingsoft/Face.java	
+++ b/src/main/java/polimi/ingsoft/Face.java	
@@ -1,18 +1,30 @@
 package polimi.ingsoft;
-
-import java.util.List;
-import java.util.Map;
-
 public class Face {
-    public List<Space> getSpaces(){
-        return null;
+    private CornerSpace upLeft,upRight,bottomLeft,bottomRight;
+
+    public CornerSpace getUpLeft(){
+        return upLeft;
     }
-
-    public List<CornerSpace> getAvailableCorners(){
-        return null;
+    public void setUpLeft(CornerSpace upLeft) {
+        this.upLeft = upLeft;
+    }
+    public CornerSpace getUpRight() {
+        return upRight;
+    }
+    public void setUpRight(CornerSpace upRight) {
+        this.upRight = upRight;
+    }
+    public CornerSpace getBottomLeft() {
+        return bottomLeft;
+    }
+    public void setBottomLeft(CornerSpace bottomLeft) {
+        this.bottomLeft = bottomLeft;
     }
-
-    public Map<Item,Integer> getNumberItems(boolean isBack){
-        return null;
+    public CornerSpace getBottomRight() {
+        return bottomRight;
+    }
+    public void setBottomRight(CornerSpace bottomRight) {
+        this.bottomRight = bottomRight;
     }
+
 }
Index: src/main/java/polimi/ingsoft/GameCard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package polimi.ingsoft;\r\n\r\npublic abstract class GameCard extends Card {\r\n    private Face front;\r\n    private Face back;\r\n\r\n    public GameCard(Face front,Face back){\r\n        this.front=front;\r\n        this.back=back;\r\n        }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/polimi/ingsoft/GameCard.java b/src/main/java/polimi/ingsoft/GameCard.java
--- a/src/main/java/polimi/ingsoft/GameCard.java	
+++ b/src/main/java/polimi/ingsoft/GameCard.java	
@@ -7,6 +7,17 @@
     public GameCard(Face front,Face back){
         this.front=front;
         this.back=back;
-        }
+    }
 
+    public Face getFront(){
+        return this.front;
+    }
+
+    public Face getBack(){
+        return this.back;
+    }
+
+    
+
+
 }
Index: src/main/java/polimi/ingsoft/CornerSpace.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package src.main.java.polimi.ingsoft;\r\n\r\nimport java.util.List;\r\n\r\npublic class CornerSpace extends Space<Item> {\r\n    private ItemPosition  position;\r\n    private boolean isCovered = false;\r\n\r\n    protected CornerSpace(List<Item> items) {\r\n        super(items);\r\n    }\r\n\r\n    public ItemPosition getPosition(){\r\n        return position;\r\n    }\r\n\r\n    public void cover() {\r\n        isCovered = true;\r\n    }\r\n\r\n    public boolean getAvailability(){\r\n        return !isCovered;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/polimi/ingsoft/CornerSpace.java b/src/main/java/polimi/ingsoft/CornerSpace.java
--- a/src/main/java/polimi/ingsoft/CornerSpace.java	
+++ b/src/main/java/polimi/ingsoft/CornerSpace.java	
@@ -1,10 +1,9 @@
-package src.main.java.polimi.ingsoft;
+package polimi.ingsoft;
 
 import java.util.List;
 
 public class CornerSpace extends Space<Item> {
     private ItemPosition  position;
-    private boolean isCovered = false;
 
     protected CornerSpace(List<Item> items) {
         super(items);
@@ -13,12 +12,4 @@
     public ItemPosition getPosition(){
         return position;
     }
-
-    public void cover() {
-        isCovered = true;
-    }
-
-    public boolean getAvailability(){
-        return !isCovered;
-    }
 }
Index: src/main/java/polimi/ingsoft/Tile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/polimi/ingsoft/Tile.java b/src/main/java/polimi/ingsoft/Tile.java
deleted file mode 100644
--- a/src/main/java/polimi/ingsoft/Tile.java	
+++ /dev/null	
@@ -1,4 +0,0 @@
-package src.main.java.polimi.ingsoft;
-
-public interface Tile {
-}
Index: src/main/java/polimi/ingsoft/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package src.main.java.polimi.ingsoft;\r\n\r\nimport java.io.PrintStream;\r\nimport java.util.Iterator;\r\n\r\npublic class Main {\r\n    public final static PrintStream console = System.out;\r\n    public final static MainController controller = new MainController();\r\n\r\n    private static boolean isLastRound() {\r\n        return false;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        // ...Initiate new match\r\n        MatchController matchController = controller.createMatch();\r\n        boolean lastRound = false;\r\n\r\n        do {\r\n            if (isLastRound()) {\r\n                lastRound = true;\r\n            }\r\n            // Play\r\n            matchController.playTurn();\r\n        } while (!lastRound);\r\n    }\r\n}\r\n\r\nclass Player {}\r\nabstract class MatchController {\r\n    Player currentPlayer;\r\n    TabelloneController tabelloneController;\r\n    protected abstract Iterator<Player> getPlayers();\r\n    private Player getCurrentPlayer() {\r\n        return new Player();\r\n    }\r\n\r\n    public void playTurn() {\r\n        Iterator<Player> players = getPlayers();\r\n        while (players.hasNext()) {\r\n            currentPlayer = players.next();\r\n            // Gioca carta\r\n            // Pesca\r\n        }\r\n    }\r\n}\r\n\r\nclass MainController {\r\n    public MatchController createMatch() {\r\n        return new MatchController();\r\n    }\r\n}\r\n\r\n\r\npublic int mandaRichiesta(posizione) {\r\n    clientsocket(sdaasdas, posizione)\r\n}\r\n\r\nmetodorichiestro-parametri-mittente\r\n        do\r\ngetMessaggi(string messaggio)(graffa)\r\nwhile parametro!=posizionegiocabile\r\n\r\ndo\r\n\r\n\r\n    while parametro!= posizionepescabile\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Tabellone {\r\n    DrawableDeck<ResourceCard> deck;\r\n    ResourceCard slotA, slotB;\r\n\r\n    public ResourceCard getSlotA() {\r\n        ResourceCard result = slotA;\r\n        slotA = deck.pop();\r\n        return result;\r\n    }\r\n}\r\n\r\nclass TabelloneController {\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/polimi/ingsoft/Main.java b/src/main/java/polimi/ingsoft/Main.java
--- a/src/main/java/polimi/ingsoft/Main.java	
+++ b/src/main/java/polimi/ingsoft/Main.java	
@@ -1,4 +1,4 @@
-package src.main.java.polimi.ingsoft;
+package polimi.ingsoft;
 
 import java.io.PrintStream;
 import java.util.Iterator;
@@ -25,7 +25,6 @@
         } while (!lastRound);
     }
 }
-
 class Player {}
 abstract class MatchController {
     Player currentPlayer;
Index: src/main/java/polimi/ingsoft/Board.java
===================================================================
diff --git a/src/main/java/polimi/ingsoft/Board.java b/src/main/java/polimi/ingsoft/Board.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/polimi/ingsoft/Board.java	
@@ -0,0 +1,29 @@
+package polimi.ingsoft;
+import java.util.HashMap;
+public class Board {
+    private final HashMap<Coordinates,PlayedCard> placedCards;
+
+    public Board() {
+        this.placedCards = new HashMap<Coordinates, PlayedCard>();
+    }
+
+    public void add(Coordinates position,PlayedCard card){
+        if(this.verifica(position)) {
+            this.placedCards.put(position, card);
+            }
+    }
+
+    public boolean verifica(Coordinates position){
+        boolean verify=false;
+
+        if(placedCards.containsKey(position))return verify;
+        if(placedCards.containsKey(position.downRight())&&placedCards.get(position.downRight()).)
+
+        if((placedCards.containsKey(position.downRight())||
+                placedCards.containsKey(position.downLeft())||
+                placedCards.containsKey(position.upRight())||
+                placedCards.containsKey(position.upLeft()))&&!placedCards.containsKey(position)&&{
+
+        }
+    }
+}
